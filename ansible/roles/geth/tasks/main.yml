---
- name: Check if the geth has been downloaded
  stat:
    path: /opt/{{ geth_tag_latest }}.tar.gz
  register: geth_download_stat_result

- name: Download the geth client
  become: yes
  get_url:
    url: "{{ geth_download_latest }}"
    dest: /opt/{{ geth_tag_latest }}.tar.gz
    mode: '0440'
  when: not geth_download_stat_result.stat.exists
  notify:
    - Extract geth
    - Create a symlink to geth
    - Initialize the geth data folder with the genesis file

- name: Create the eth keystore directory
  become: yes
  ansible.builtin.file:
    path: /root/.ethereum/keystore
    state: directory
    mode: '0755'

- name: Copy keystore file to host
  become: yes
  ansible.builtin.copy:
    src: "{{ geth_keyfile }}"
    dest: /root/.ethereum/keystore
    owner: root
    group: root
    mode: '0600'
  when: geth_keyfile is defined

- name: Copy genesis file to host
  become: yes
  ansible.builtin.copy:
    src: genesis.json
    dest: /root/
    owner: root
    group: root
    mode: '0600'

- name: Check if a nodekey is defined
  local_action: stat path={{ inventory_hostname }}.key
  register: geth_node_key_stat_result

- name: Copy nodekey to the host
  become: yes
  ansible.builtin.copy:
    src: "{{ inventory_hostname }}.key"
    dest: /root/bootnode.key
    owner: root
    group: root
    mode: '0600'
  when: geth_node_key_stat_result.stat.exists

- name: Check that the eth directory exists
  become: yes
  stat:
    path: /root/.ethereum/geth
  register: eth_dir_stat_result


- name: Template geth service
  become: yes
  ansible.builtin.template:
    src: geth.service.j2
    dest: /etc/systemd/system/geth.service
    owner: root
    group: root
    mode: '0644'
  notify:
    - Restart geth service
    - Reload systemd configs


- name: Ensure geth is running
  become: yes
  ansible.builtin.systemd:
    state: started
    name: geth
